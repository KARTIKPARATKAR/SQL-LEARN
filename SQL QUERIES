# 📌 SQL Queries Documentation

## 📖 Introduction
**SQL (Structured Query Language)** is used for storing, retrieving, managing, and manipulating data within a **Database Management System (DBMS)**.

🔹 These queries are executed in **Oracle**.
🔹 In this file, lines starting with `--` are comments explaining the SQL queries.

---

## 📌 Basic Table Operations

### 🏗️ Creating a Table
```sql
CREATE TABLE test(
    testcolumn INT
);
```
➡️ Creates a table named **test** with one column `testcolumn` of type `INT`.

### ➕ Adding Columns to a Table
```sql
ALTER TABLE test ADD anothercolumn VARCHAR(255);
```
➡️ Adds a new column **anothercolumn** of type `VARCHAR(255)` to the table **test**.

### 🔍 Viewing a Table
```sql
SELECT * FROM test;
```
➡️ Displays all records from the **test** table (currently empty).

### ❌ Dropping a Table
```sql
DROP TABLE test;
```
➡️ Deletes the **test** table from the database.

---

## 📌 Creating and Managing Tables

### 🎵 Creating the `band` Table
```sql
CREATE TABLE band(
    name VARCHAR(255) NOT NULL,
    id INT NOT NULL,
    PRIMARY KEY (id)
);
```
➡️ Creates a **band** table with:
- `name` (text, required)
- `id` (integer, required, **Primary Key**)

### 💽 Creating the `albums` Table
```sql
CREATE TABLE albums(
    id INT NOT NULL,
    name VARCHAR(255) NOT NULL,
    release_year INT,
    bandid INT NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (bandid) REFERENCES band(id)
);
```
➡️ Creates an **albums** table with:
- `id` (integer, required, **Primary Key**)
- `name` (text, required)
- `release_year` (integer, optional)
- `bandid` (integer, references **band(id)** as a **Foreign Key**)

---

## 📌 Inserting Data

### 🎸 Inserting Data into `band`
```sql
INSERT INTO band VALUES ('Iron Maiden',1);
INSERT INTO band VALUES ('Deuce',2);
INSERT INTO band VALUES ('Avenged Sevenfold',3);
INSERT INTO band VALUES ('Ankor',4);
```

### 💿 Inserting Data into `albums`
```sql
INSERT INTO albums VALUES (1,'The Number of the Beast',1985,1);
INSERT INTO albums VALUES (2,'Power Slave',1984,1);
INSERT INTO albums VALUES (3,'Nightmare',2018,2);
INSERT INTO albums VALUES (4,'Nightmare',2010,3);
INSERT INTO albums VALUES (5,'Test Album',NULL,3);
```

---

## 📌 Querying Data

### 🔎 Viewing All Records
```sql
SELECT * FROM band;
SELECT * FROM albums;
```

### 🔍 Filtering with Conditions
```sql
SELECT * FROM band WHERE id <= 2;
SELECT name FROM band;
SELECT name AS "Band Name", id AS "Band ID" FROM band;
```

### 🔤 Sorting Records
```sql
SELECT * FROM band ORDER BY name;  -- A to Z
SELECT * FROM band ORDER BY name DESC;  -- Z to A
```

### 🚀 Handling Duplicates
```sql
SELECT DISTINCT name FROM albums;
```
➡️ Removes duplicate album names.

### ✏️ Updating Data
```sql
UPDATE albums SET release_year = 2023 WHERE id = 4;
SELECT * FROM albums;
```
➡️ Updates `release_year` to **2023** where `id` is **4**.

### 🎯 Filtering with LIKE
```sql
SELECT * FROM albums WHERE name LIKE '%er%';
```
➡️ Finds album names containing **'er'**.

---

## 📌 Advanced Queries

### 🔄 BETWEEN Operator
```sql
SELECT * FROM albums WHERE release_year BETWEEN 2000 AND 2025;
```

### 🏷️ NULL Handling
```sql
SELECT * FROM albums WHERE release_year IS NULL;
DELETE FROM albums WHERE id = 5;
```

### 🔗 SQL Joins
```sql
SELECT * FROM band JOIN albums ON band.id = albums.bandid;  -- Inner Join
SELECT * FROM band LEFT JOIN albums ON band.id = albums.bandid;  -- Left Join
SELECT * FROM band RIGHT JOIN albums ON band.id = albums.bandid;  -- Right Join
```

### 📊 Aggregate Functions
```sql
SELECT AVG(release_year) FROM albums;  -- Average release year
SELECT SUM(release_year) FROM albums;  -- Sum of release years
SELECT bandid, COUNT(bandid) FROM albums GROUP BY bandid;  -- Count albums per band
```

### 🏆 Complex Query Example
```sql
SELECT b.name AS bandname, COUNT(a.id) AS num_albums
FROM band b
LEFT JOIN albums a ON b.id = a.bandid
GROUP BY b.id, b.name;
```
➡️ Counts how many albums each band has.

### 📌 Using HAVING Instead of WHERE After GROUP BY
```sql
SELECT b.name AS bandname, COUNT(a.id) AS num_albums
FROM band b
LEFT JOIN albums a ON b.id = a.bandid
GROUP BY b.id, b.name
HAVING COUNT(a.id) = 1;
```
➡️ Filters only bands with **one** album.

---

## 🚀 Conclusion
🔹 These SQL queries cover **table creation, insertion, querying, filtering, sorting, updating, and joining**.
🔹 Understanding these basics will help you write more efficient database queries!

Happy SQL Coding! 🚀🎯

